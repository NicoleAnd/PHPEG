Node.js搭建服务器

http模块

Nodejs提供了很多的模块，手册按模块列出的api
* 搭建最简单的demo
==========================
// 利用nodejs内置的http模块创建服务器
// 得到http模块
var http = require("http");

// 创建服务器 用createServer()
// 回调函数中req代表请求，res代表响应
var server = http.createServer(function(req,res){
  res.end("OK");
});

// 监听端口
server.listen(4000);

// node 01.js  http://127.0.0.1:4000/
==========================
============* 搭建最简单的demo============
// 利用nodejs内置的http模块创建服务器
// 得到http模块
var http = require("http");
// 创建服务器 用createServer()
// 回调函数中req代表请求 res代表响应
var server = http.createServer(function(req,res) {
	 // 输出内容 计算过程在服务器上
	 res.write("aaaa");
	 res.write("bbbb");
	 res.write("cccc");
	 res.end("<h1>NodeJs 我来了</h1>");
	 
});

// 监听端口  
server.listen(4000);
==================END================

* 使用外置页面

    我们现在制作一个外面的网页public/mingxing.html

    fs模块最重要的api就是readFile
============* 使用外置页面============
// 利用nodejs内置的http模块创建服务器
// 得到http模块
var http = require("http");

// 使用fs模块（文件系统模块）
var fs = require("fs");

// 创建服务器 用createServer()
// 回调函数中req代表请求，res代表响应
var server = http.createServer(function(req,res){
  // res.end("OK");
  
  // 需要读取的文件 第一个参数表示URL 必须以./开头 表示从当前js文件出发寻找html文件
  fs.readFile("./public/mingxing.html",function(err,data){
    res.end(data);
  });
});

// 监听端口
server.listen(4000);

// node 01.js  http://127.0.0.1:4000/
==================END================

* 路由(重点)
   01.js这个案例 无论输入什么url 都访问mingxing.html

   提一个需求  /mingxing.html  让它显示网页


   顶层路由设计
      * 物理文件层次和URL没有关系
      * nodejs可以做顶层路由设计，一个页面想叫啥URL就可以叫啥
      * 用户输入的url可以被路由映射为任何html页面 
  现在主流  设计有意义的url
    知乎的url
      http://www.zhihu.com/people/kou-yun/answers
      http://www.zhihu.com/people/kou-yun/asks
      http://www.zhihu.com/people/kou-yun/pins

    老一代路由 
      http://www.zhihu.com/tiwen.php?username=kou-yun
      http://www.zhihu.com/asks.php?username=kou-yun

nodejs 不具备天生路由，需要自己设置路由


** 模块（重点）
    1 HTML宿主环境下的多js文件，他们之间的作用域是打通的

    2 require()谁就会运行谁
      在nodejs中，可以在js文件中require（引用）另一个js文件，此时就会立即执行那个引用的js文件

    3 js文件在nodejs环境中作用域隔离
        原因是nodejs中没有window对象

    4 借助exports.** = ** 进行对外暴露
        var a = require("./a.js");

        nodejs在运行的时候，接受那个变量a自动成为a.js中exports对象
          a.js
          var num = 20; // js文件在nodejs环境中作用域隔离
          exports.num = num; // 对外暴露
          app.js
          var a = require("./a.js");
          console.log(a.num);
          
    5 使用module.exports = ** 暴露
        我们有时希望对外仅仅暴露一个东西(通常是构造函数)，此时我们可以使用module.exports = **；进行对外暴露












